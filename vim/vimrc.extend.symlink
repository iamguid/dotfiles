" =============================================================================
" .vimrc.extend         For Vim version 7.4.            Last change: Fri Sep 18
"
"
"                            VIM EXTENDED CONFIG FILE
"
" Version:
"    1.0
"
" Sections:
"    1.  Vundle
"    2.  General
"    3.  Colors
"    4.  UI Config
"    5.  Spaces & Tabs
"    6.  Searching
"    7.  Folding
"    8.  Movement
"    9.  Backups
"    10. FileTypes
"    11. PluginsSettings
"    12. Helpers
"
" 2. Vundle {{{
" =============================================================================
set nocompatible              " be iMproved, required
filetype off                  " required

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Alternatively, pass a path where Vundle should install plugins
"# call vundle#begin('~/some/path/here')

" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" All of your Plugins must be added before the following line

" To get more Vim plugins, tips and tricks
" See: http://vimcolors.com/
" See: http://vimawesome.com/
" See: http://www.bestofvim.com/
" See: http://www.vim.org/

" Color theme plugins
Plugin 'Zenburn'

" Language plugins
Plugin 'digitaltoad/vim-jade'
Plugin 'groenewege/vim-less'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'othree/html5.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'tpope/vim-surround'

" Common plugins
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'scrooloose/nerdcommenter'
Plugin 'kien/ctrlp.vim'
Plugin 'mtth/scratch.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'scrooloose/syntastic'

" Interface plugins
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'bling/vim-airline'

call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"# filetype plugin on
"
" Brief helpscrooloose/nerdcommenter
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" }}}

" 2. General {{{
" =============================================================================
" Sets how many lines of history VIM has to remember
set history=1000

" Enable syntax processing
syntax on

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" set default colorscheme
colorscheme default

" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W w !sudo tee % > /dev/null
" }}}

" 3. Colors {{{
" =============================================================================
colors zenburn
" }}}

" 4. UI config {{{
" =============================================================================
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to
set showmatch           " highlight matching [{()}]

set cursorline          " highlight current cursor line
set relativenumber      " show relative line numbers
set number              " show current line number (use hybrid mode)

" Show ruller
set colorcolumn=80

" Highlight cursor line
set cursorline

" Gvim specific
if has('gui_running')
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 12
endif
" }}}

" 5. Spaces & Tabs {{{
" =============================================================================
set tabstop=4       " number of visual spaces per TAB
set shiftwidth=4    " number of spaces of (auto)indent
set softtabstop=4   " number of spaces in tab when editing
set smarttab        " insert tab, depending on the context

" Show unvisible chars
set list
set listchars=
set listchars+=eol:↲
set listchars+=tab:▸·
set listchars+=trail:·
set listchars+=extends:>
set listchars+=precedes:<

" Tabs auto convert
au! BufReadPost * silent Space2Tab
au! BufWritePre * silent Tab2Space
au! BufWritePost * silent Space2Tab
" }}}

" 6. Searching {{{
" =============================================================================
set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlite search results

" Search text under cursor using *
nnoremap * *N

" Search only selected text in visual mode
vnoremap * y :execute ":let @/=@\""<CR> :execute "set hlsearch"<CR>

" Clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
" }}}

" 7. Folding {{{
" =============================================================================
set foldenable               " enable folding
set foldlevelstart=10        " open most folds by default
set foldnestmax=10           " 10 nested fold max
set foldmethod=marker        " fold based on marker
set foldtext=NeatFoldText()  " set custom fold text
" }}}

" 8. Movement {{{
" =============================================================================
" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

" Move vertically by long visual line using [jk]
noremap j gj
noremap k gk

" Move to beginning/end of line using SHIFT+[be]
noremap B ^
noremap E $

" highlight last inserted text
nnoremap gV `[v`]
" }}}

" 9. Backups {{{
" =============================================================================
" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile
" }}}

" 10. FileTypes {{{
" Define custom local buffer setting for file types.
" =============================================================================

" Jade
augroup jade
    au!
    au FileType jade setlocal tabstop=2
    au FileType jade setlocal shiftwidth=2
augroup END


" CSS
augroup css
    au!
    au FileType css setlocal foldmethod=marker foldmarker={,}
    au FileType css setlocal omnifunc=csscomplete#CompleteCSS
augroup END


" Json
augroup json
    au!
    au FileType json setlocal foldmethod=marker foldmarker={,}
    au FileType json setlocal tabstop=2
    au FileType json setlocal shiftwidth=2
augroup END


" JavaScript
augroup javascript
    au!
    au FileType javascript setlocal tabstop=4
    au FileType javascript setlocal shiftwidth=4
augroup END

" Python
augroup python
    au!
    au FileType python setlocal tabstop=4
    au FileType python setlocal shiftwidth=4
augroup END
" }}}

" 11. PluginsSettings {{{
" =============================================================================

    " NERDTree plugin {{{
    " https://github.com/scrooloose/nerdtree/
    " =========================================================================

    " Set keys shortcuts
    map <F7> <plug>NERDTreeTabsToggle<CR>

    " Open NERDTree on gvim/macvim startup.
    let g:nerdtree_tabs_open_on_gui_startup=0

    " Display the bookmarks table on startup
    let NERDTreeShowBookmarks=1

    " Display hidden files
    let NERDTreeShowHidden=1

    let g:nerd_preview_enabled = 0
    let g:preview_last_buffer  = 0
    " }}}


    " NERDCommenter plugin {{{
    " https://github.com/scrooloose/nerdcommenter/
    " =========================================================================

    " Set keys shortcuts
    map <C-\> <plug>NERDCommenterToggle
    " }}}


    " vim-airline plugin {{{
    " https://github.com/bling/vim-airline/
    " =========================================================================

    " Automatically displays all buffers when there's only one tab open.
    let g:airline#extensions#tabline#enabled = 1

    " Use powerline fonts
    " See: https://github.com/powerline/fonts
    let g:airline_powerline_fonts = 1

    " vim-airline doesn't appear until I create a new split
    " See: https://github.com/bling/vim-airline/wiki/FAQ#vim-airline-doesnt-appear-until-i-create-a-new-split
    set laststatus=2
    " }}}


    " vim-better-whitespace plugin {{{
    " https://github.com/ntpeters/vim-better-whitespace
    " =========================================================================

    " This will strip all trailing whitespace everytime
    " you save the file for all file types.
    autocmd BufWritePre * StripWhitespace
    "}}}


    " CtrlP plugin {{{
    " https://github.com/kien/ctrlp.vim
    " =========================================================================

    " CtrlP will scan for dotfiles and dotdirs.
    let g:ctrlp_show_hidden = 1

    " When starting up, CtrlP sets its local working directory according to this
    " variable
    let g:ctrlp_working_path_mode = 'rw'
    " }}}


    " EasyMotion plugin {{{
    " https://github.com/easymotion/vim-easymotion
    " =========================================================================

    " Disable default mappings
    let g:EasyMotion_do_mapping = 0

    " Turn on case insensitive feature
    let g:EasyMotion_smartcase = 1

    " JK motions: Line motions
    map <Space>j <Plug>(easymotion-j)
    map <Space>k <Plug>(easymotion-k)
    "}}}


    " Syntastic plugin {{{
    " https://github.com/scrooloose/syntastic/
    " =========================================================================

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    "}}}
"}}}

" 12. Helpers {{{
" =============================================================================
" Return indent (all whitespace at start of a line), converted from
" tabs to spaces if what = 1, or from spaces to tabs otherwise.
" When converting to tabs, result has no redundant spaces.
function! Indenting(indent, what, cols)
    let spccol = repeat(' ', a:cols)
    let result = substitute(a:indent, spccol, '\t', 'g')
    let result = substitute(result, ' \+\ze\t', '', 'g')
    if (a:what == 1)
        let result = substitute(result, '\t', spccol, 'g')
    endif
    return result
endfunction

" Convert whitespace used for indenting (before first non-whitespace).
" what = 0 (convert spaces to tabs), or 1 (convert tabs to spaces).
" cols = string with number of columns per tab, or empty to use 'tabstop'.
" The cursor position is restored, but the cursor will be in a different
" column when the number of characters in the indent of the line is changed.
function! IndentConvert(line1, line2, what, cols)
    let savepos = getpos('.')
    let cols = empty(a:cols) ? &tabstop : a:cols
    execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
    call histdel('search', -1)
    call setpos('.', savepos)
endfunction

" Indent converter helper commands
command! -nargs=? -range=% Space2Tab call IndentConvert(<line1>,<line2>,0,<q-args>)
command! -nargs=? -range=% Tab2Space call IndentConvert(<line1>,<line2>,1,<q-args>)

" Folding text pattern
function! NeatFoldText()
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
" }}}
